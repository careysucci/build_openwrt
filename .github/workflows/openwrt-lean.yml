#
#
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Lean Builder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh_enabled:
        description: 'ssh'
        type: boolean
        required: false
        default: false
      clear_actions_cache:
        description: 'clear actions cache'
        type: boolean
        required: false
        default: false

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: diy/x86/lean.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  AUTHORED_BY: Wy.House
  IMG_PREFIX: WyHouse
  TARGET_MATRIX: lede
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: clear actions cache
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.clear_actions_cache }}
        uses: AutoModality/action-clean@v1.1.0

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev rename file clang g++
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
          echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
          echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH ${{ env.TARGET_MATRIX }}
          ln -sf /workdir/${{ env.TARGET_MATRIX }} $GITHUB_WORKSPACE/${{ env.TARGET_MATRIX }}

      - name: Free up disk space
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p -m 777 /mnt/${{ env.TARGET_MATRIX }}/dl /mnt/${{ env.TARGET_MATRIX }}/bin /mnt/${{ env.TARGET_MATRIX }}/staging_dir
          ln -sf /mnt/${{ env.TARGET_MATRIX }}/dl ${{ env.TARGET_MATRIX }}/dl
          ln -sf /mnt/${{ env.TARGET_MATRIX }}/bin ${{ env.TARGET_MATRIX }}/bin
          ln -sf /mnt/${{ env.TARGET_MATRIX }}/staging_dir ${{ env.TARGET_MATRIX }}/staging_dir

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF ${{ env.TARGET_MATRIX }}/feeds.conf.default
          chmod +x ./$DIY_P1_SH && ./$DIY_P1_SH

      - name: Update feeds
        run: |
          cd ${{ env.TARGET_MATRIX }}
          ./scripts/feeds update -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files ${{ env.TARGET_MATRIX }}/files
          [ -e .config ] && mv $GITHUB_WORKSPACE/diy/x86/lean.config ${{ env.TARGET_MATRIX }}/.config
          chmod +x ./$DIY_P2_SH && ./$DIY_P2_SH
          cd ${{ env.TARGET_MATRIX }}
          ./scripts/feeds update -a
          sed -i 's#GO_PKG_TARGET_VARS.*# #g' feeds/packages/utils/v2dat/Makefile
          ./scripts/feeds install -a
          cp -f $GITHUB_WORKSPACE/diy/x86/lean.config .config && make defconfig

      - name: SSH Enabled Debug
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.ssh_enabled }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
        with:
          limit-access-to-actor: true

      - name: Download package
        id: package
        run: |
          cd ${{ env.TARGET_MATRIX }}
          cp -f .config $GITHUB_WORKSPACE/diy/common/.config
          make download -j$(($(nproc)+1))
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd ${{ env.TARGET_MATRIX }}
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: SSH Failed Debug
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
        with:
          limit-access-to-actor: true

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.TARGET_MATRIX }}/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd ${{ env.TARGET_MATRIX }}/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: ${{ env.IMG_PREFIX }}_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@master
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 2

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
